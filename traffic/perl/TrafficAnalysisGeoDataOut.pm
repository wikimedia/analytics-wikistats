#!/usr/bin/perl

# sub ReadInputCountriesMonthly reads $path_csv_counts_monthly (/a/wikistats_git/squids/csv/SquidDataVisitsPerCountryMonthly.csv)

# 2016-07-09 csv files no longer written after migration from SquidReportArchive.pl

# WriteCsvBrowserLanguages
# WriteCsvGoogleBots
# WriteCsvSvgFilePerCountryOverview
# WriteCsvCountriesTimed

# 2018-04 csv_shorten_demographics: no longer shorten demographics for csv files (still do for html files)  
# csv files are now also post processed into json file, which could benefit from more detailed figures
# so for WiViVi shortening needs to be done in javascript 
# for request data (= page views) shortening still provides some fuzziness on purpose 

# temporary code: write all codes for countries to one csv file, which replaces a handful on partial csv files in meta folder
sub WriteGeoInfoWikimedia
{
  my ($iso2,$iso3,$region_code,$north_south_code,$country_name,$article_title,$width,$height) ;

  open CSV_GEOINFO, '>', "$path_meta/$file_csv_geocodes" || die ("Could not open '$path_meta/$file_csv_geocodes'") ; 

  print CSV_GEOINFO "# generated by TrafficAnalysisGeo.pl to collect all codes for countries/regions into one file,". 
                    " to be maintained manually\n" ;   
  print CSV_GEOINFO "# from ../csv/meta/CountryCodes.csv: ISO_3166-1 alpha-2,country name)\n" ;
  print CSV_GEOINFO "# from ../csv/meta/CountryCodesISO3.csv: ISO_3166-1 alpha-3 (merged by country name)\n" ;
  print CSV_GEOINFO "# from ../csv/meta/RegionCodes.csv: region and N/S (merged by country name)\n" ;
  print CSV_GEOINFO "# from ../csv/meta/CountryInfo.csv: population, connected, wp/en article title," . 
                    " icon (merged by country name) (data originally from wp/en)\n";
  print CSV_GEOINFO "# C:country info, R:region info, L:language info, F: flag info\n" ;
  print CSV_GEOINFO "# population counts in this file from wp-en List_of_countries_by_population\n"; 
  print CSV_GEOINFO "# perc internet users (connected) in this file from wp-en List_of_countries_by_number_of_Internet_users\n"; 
  print CSV_GEOINFO "record type,ISO_3166-1 alpha-2,ISO_3166-1 alpha-3,region,N/S,country name,population,". 
                    "connected,wp/en article title,icon file,icon width,icon height\n" ;
  
# foreach $iso2 (sort keys %country_names)  
  foreach $iso2 (sort keys %iso2_codes)  
  {
    next if $iso2 eq 'A1' or # MaxMind 'Anonymous Proxy'
            $iso2 eq 'A2' or # MaxMind 'Satellite Provider' 
            $iso2 eq 'O1' or # MaxMind 'Other Country'
            $iso2 eq 'EU' or # MaxMind 'Europe Unspecified'  
            $iso2 eq 'AP' or # MaxMind 'Asia/Pacific region'  
            $iso2 eq '-P' or # MaxMind 'IPv6'  
            $iso2 eq '-X' or # MaxMind 'Unknown'  
            $iso2 eq 'XX' or # MaxMind 'Unknown'  
            $iso2 =~ /^\-+$/ ; # only one or more dahses

    $country_name     = $country_names {$iso2} ;
  # $iso3             = $country_names_iso3 {$country_name} ;
  # $iso3             = $country_names_iso3 {$iso2} ;
    $iso3             = $country_iso3 {$iso2} ;
    $region_code      = $region_codes {$iso2} ;
    $north_south_code = $north_south_codes {$iso2} ;
  # $country_meta_info = $country_meta_info {$country_name} ;
    $country_meta_info = $country_meta_info {$iso2} ;
    my ($article_url,$icon,$population,$connected) = split (',', $country_meta_info) ;
    $article_url =~ s/^.*wiki\/// ; # extract the actual page title from html
    $article_url =~ s/\'.*$// ;
    $article_title = $article_url ;
    ($width  = $icon) =~s/^.* (width=\d+).*$/$1/ ; 
    ($height = $icon) =~s/^.* (height=\d+).*$/$1/ ; 
    $icon =~s/^.*commons\/thumb/commons\/thumb/ ;
    $icon =~ s/\'.*$// ;
    $icon =~s/^.*commons\/thumb/commons\/thumb/ ;
    print CSV_GEOINFO "C,$iso2,$iso3,$region_code,$north_south_code,$country_name,$population,$connected,$article_title,$icon,$width,$height\n" ;
  }
  close CSV_GEOINFO ;
}

sub WriteCsvCountriesGoTo
{
  &LogSub ("WriteCsvCountriesGoTo: $path_csv/$file_csv_countries_languages_visited\n") ;

  open CSV_OUT, '>', "$path_csv/$file_csv_countries_languages_visited" ;

  foreach $country (sort keys %countries)
  {
    @targets = sort {$targets_totals {"N,$country"}{$b} <=> 
                     $targets_totals {"N,$country"}{$a}} keys %{$targets_totals {"N,$country"}} ;

    $line = "\nBot,Country," ;
    $cnt_targets = 0 ;
    foreach $target (@targets)
    {
      $target2 = $target ;
      $target2 =~ s/^.*?:// ;
      $target3 = $out_languages {$target2} ;
      if ($target3 eq "")
      { $target3 = "[$target2]" ; }
      $line .= "$target3," ;

      last if $cnt_targets++ >= 100 ;
    }
    print CSV_OUT "$line\n" ;

    foreach $bot ("N","Y")
    {
      $country_name = $country_names {$country} ;
      $country_name =~ s/\n//gs ;
      $country_name =~ s/[\x00-\x1F]//gs ;

      $cnt_targets = 0 ;
      $tot_targets = 0 ;
      foreach $target (@targets)
      {
        $tot_targets += $targets_totals {"$bot,$country"}{$target} ;
      }

      $line = "$bot,$country_name," ;
      $cnt_targets = 0 ;
      foreach $target (@targets)
      {
        $line .= $targets_totals {"$bot,$country"}{$target} . "," ;

        last if $cnt_targets++ >= 25 ;
      }
      print CSV_OUT "$line\n" ;

      $line = "$bot,$country_name," ;
      $cnt_targets = 0 ;
      if ($tot_targets > 0)
      {
        foreach $target (@targets)
        {
          $line .= sprintf ("%.1f\%",100*$targets_totals {"$bot,$country"}{$target} / $tot_targets) . "," ;

          last if $cnt_targets++ >= 25 ;
        }
        print CSV_OUT "$line\n" ;
      }
    }
  }
  close CSV_OUT ;
}

sub PrintCsv
{
  my ($csv, $path) = @_ ;

  open  CSV_OUT, '>', $path ;
  print CSV_OUT $csv ;
  close CSV_OUT ;
}

sub PrintJson
{
  my ($json, $path) = @_ ;

  open  JSON_OUT, '>', $path ;
  print JSON_OUT $json ;
  close JSON_OUT ;
}

sub WriteJsFileVisualizationInfo
{
  my $yyyymm = shift ;
  my ($yyyy,$mm) = split ('-', $yyyymm) ;
  my @months = qw (January February March April May June July August September October November December) ;
  my $month_year = $months [$mm-1] . " $yyyy" ;  

  my $file_js = "$path_reports/datamaps-views-month.js" ;
  print "print to $file_js: 'data_month = \"$month_year\"'\n\n" ;
  open  JSFILE, '>', $file_js ; 
  print JSFILE "data_month = \"$month_year\"" ;
  close JSFILE ;
}

sub WriteCsvDataMapInfoPerCountry
{
  &LogSub ("WriteCsvDataMapInfoPerCountry\n") ;

  # &AddExtraCountryNames_iso3 ; # obsolete ?

  my ($iso2, $iso3) ;

  $folder_scripts = "//stats.wikimedia.org/wikimedia/squids/scripts/" ;
  $html =~ s/WORLDMAP_D3/<script src="$folder_scripts\/d3.min.js"><\/script>\n<script src="$folder_scripts\/topojson.min.js"><\/script>\n<script src="$folder_scripts\/datamaps.world.hires.min.js"><\/script>\n<script src="$folder_scripts\/options.js"><\/script>\n/ ;

  my $d3_csv_countries = "ISO,views_per_person,total_views_as_perc_of_world_views,total_views,population,perc_people_connected,flag_icon,breakdown_per_language,month=$reportmonth\n" ; 

  my $json_flags = "[\n" ;
  my $csv_flags  = "country_iso3,flag_image,month=$reportmonth\n" ;

  foreach $country (keys_sorted_by_value_num_desc %requests_recently_per_country)
  {
    %requests_per_language = %{$requests_recently_per_country_per_language {$country}} ;
    @languages = keys_sorted_by_value_num_desc %requests_per_language ;

    $requests_this_country  = $requests_recently_per_country {$country} ;

  # $country_meta = $country_meta_info {$country} ;
    $iso2 = $country_iso2_from_name {$country} ;
    $country_meta = $country_meta_info {$iso2} ;

    my ($link,$icon,$population,$connected) = split (',', $country_meta) ;

    $population  =~ s/_//g ;
    $connected   =~ s/_//g ;
    $requests_this_country2 = &i2KM1 ($requests_this_country * 1000) ; # input is in 1000's 
    $connected2  = '--' ;
    $requests_per_capita = '--' ;
     
    if ($population> 0)
    { 
      $connected2 = sprintf ("%.0f", 100*$connected/$population) .'%' ; 
      $requests_per_capita = &i2SigDec ($requests_this_country * 1000 / $population) ;
    } 

    $perc = 'n.a.' ;
    if ($requests_recently_all > 0)
    { $perc = &Percentage ($requests_this_country / $requests_recently_all) ; }

    ($link_country,$icon,$population) = &CountryMetaInfo ($country) ;

  # $population2 = &i2KM1 ($population) ;
    $population2 = $population ; # see csv_shorten_demographics above 

  # $iso3 = $country_names_iso3 {$country} ;
    $iso3 = $country_iso3 {$iso2} ;
    if ($iso3 eq '')
    { 
      print "no iso3166 code for '$country'\n" ; 
      $iso3 = 'XXX' ; 
    }
    
    ($perc2 = $perc) =~ s/\%// ; 

    $icon =~ s/"/'/g ;
    $d3_csv_countries  .= "$iso3,$requests_per_capita,$perc2,$requests_this_country2,$population2,$connected2,," ;  

    $json_flags .= "{ \"ISO3\": \"$iso3\", \"flag\": \"$icon\" },\n" ;
    $icon =~ s/,/\%2C/g ;
    $csv_flags  .= "$iso3,$icon\n" ;

    $perc_tot = 0;
    $requests_used = 0 ;
    $lines = 0 ;
    for ($l = 0 ; $l < 100 ; $l++)
    {
      $lines ++ ;
   #  $odd_even = $lines % 2 == 0 ? 'even' : 'odd' ;

      $requests_this_language = $requests_recently_per_country_per_language {$country} {$languages [$l]} ;
      $requests_all_languages = $requests_recently_per_country              {$country} ;

      last if $requests_this_language == 0 ;

      $requests_used += $requests_this_language ;

      $perc = 0 ;
      if ($requests_recently_all > 0)
      {
        $perc = &Percentage ($requests_this_language / $requests_all_languages) ;

        last if $perc < $cutoff_percentage ;

        $perc_tot += $perc ;
      }
      ($perc2 = $perc) =~ s/\%// ;
  
      if ($perc2 >= 0.1)     
      { $requests_perc {$languages [$l]} .= "$iso3:$perc2;" ; }

      $language = $languages [$l] ;
      if ($out_languages {$language} ne "")
      { $language = $out_languages {$language} ; }
      if (length ($language) > 20)
      { $language =~ s/ .*$// ; }

 #    $bar = &Perc2Bar ($perc,'green',10) ;

      $bar_100 = "" ;
      if ($bars++ == 0)
      {
        $bar_width_100 = 600 - $bar_width ;
        $bar_100 = "<img src='white.gif' width=$bar_width_100 height=15>" ;
        $bar_100 = '' ; # until gif is added
      }

      if ($language !~ /Portal/)
      { $language .= " Wp" ; }

      $perc =~ s/(\.\d)0/$1/ ; # 0.10% -> 0.1%
      if ($show_logcount && ($requests_this_language < 5 * $months_recently)) # show in grey to discuss threshold on foundation-l
      { $perc = "<font color=#800000>$perc</font>" ; }

      ($language2 = $language) =~ s/ Wp// ;

      $d3_csv_countries  .= "${languages [$l]}:$language2:$perc|" ; 
    }

    if ($perc_tot > 100) { $perc_tot = 100 ; }
    $requests_other = $requests_all_languages - $requests_used ;
    $perc_other = sprintf '%.1f', 100 - $perc_tot ;
    if (($requests_other > 0) && ($perc_other > 0))
    { $d3_csv_countries  .= "&nbsp;:Other:$perc_other\%" ; }

    $d3_csv_countries  =~ s/\|$// ; 
    $d3_csv_countries .= ",-\n" ; # April 2018, added dummy data for new (pseudo) column title in header ',month=[yyyy-mm]'
  }
 
  $d3_csv_countries  =~ s/\|$// ; 

  $json_flags =~ s/,$// ;
  $json_flags .= "]\n" ;

  &PrintJson ($json_flags, "$path_reports/datamaps-flags.json") ; # no longer used (but kept) as d3.json is async 
  &PrintCsv  ($csv_flags,  "$path_reports/datamaps-flags.csv") ;  

  $d3_csv_countries =~ s/\&nbsp;/^/g ; # compact further
  &PrintCsv ($d3_csv_countries, "$path_reports/datamaps-views-per-country.csv") ; 
}

sub WriteCsvDataMapInfoPerRegion
{
  &LogSub ("WriteCsvDataMapInfoPerRegion\n") ;

  my ($iso2, $iso3) ;
  my ($sample_rate) = @_ ;
  my ($link_country,$population,$icon,$bar,$bars,$bar_width,$perc,$perc_tot,$perc_global,$requests_tot) ;
  my (@index_countries,@csv_countries) ;
  my $views_edits_lc = lc $views_edits ;
  my $views_edits_lcf = ucfirst $views_edits_lc ;

  my $d3_csv_rows_max = 2250 ;

  $requests_tot = 0 ;

  undef %requests_per_region ;

  foreach $country_code (keys_sorted_by_value_num_desc %requests_recently_per_country_code)
  {
    my ($country,$code) = split ('\|', $country_code) ;
  # my $iso3 = $country_names_iso3 {$country} ;
    my $iso3 = $country_iso3 {$country_iso2_from_name {$country}} ;

    my $region_code      = $region_codes {$code} ;
    if ($region_code eq '')
    { $region_code = 'XX' ; } 

  #  if ($region_code eq 'XX')
  # { print "$code $country $region_code\n" ; exit ; } # debug only # qqq 

    my $north_south_code = $north_south_codes {$code} ;

    $region_name = $region_code ;
    $region_name =~ s/^AF$/<font color=#028702><b>Africa<\/b><\/font>/ ;
    $region_name =~ s/^CA$/<font color=#249CA0><b>Central-America<\/b><\/font>/ ;
    $region_name =~ s/^SA$/<font color=#FCAA03><b>South-America<\/b><\/font>/ ;
    $region_name =~ s/^NA$/<font color=#C802CA><b>North-America<\/b><\/font>/ ;
    $region_name =~ s/^EU$/<font color=#0100CA><b>Europe<\/b><\/font>/ ;
    $region_name =~ s/^AS$/<font color=#E10202><b>Asia<\/b><\/font>/ ;
    $region_name =~ s/^OC$/<font color=#02AAD4><b>Oceania<\/b><\/font>/ ;
    $region_name =~ s/^XX$/<font color=#808080><b>Unknown1<\/b><\/font>/ ;

    $north_south_name = $north_south_code ;
  # $north_south_name =~ s/^N$/<font color=#000BF7><b>N<\/b><\/font>/ ;
  # $north_south_name =~ s/^S$/<font color=#FE0B0D><b>S<\/b><\/font>/ ;

    ($link_country,$icon,$population,$connected) = &CountryMetaInfo ($country) ;
     
    my $requests_this_country  = $requests_recently_per_country {$country} ;
    my $requests_this_country2 = int ($requests_this_country * $sample_rate / $months_recently) ;

    $requests_tot += $requests_this_country2  ;

    $requests_per_region {$region_code}      += $requests_this_country ;
    $requests_per_region {$north_south_code} += $requests_this_country ;
    $requests_per_region2 {$region_code}      += $requests_this_country2 ;
    $requests_per_region2 {$north_south_code} += $requests_this_country2 ;

    $requests_per_person = ".." ;
    if ($population > 0)
    { $requests_per_person    = sprintf ("%.0f", $requests_this_country2 / $population) ; }

    $requests_per_connected_person = ".." ;
    if ($connected > 0)
    {
      if ($views_edits =~ /edit/i)
      { $requests_per_connected_person = sprintf ("%.4f", $requests_this_country2 / $connected) ; }
      else
      {
        if ($requests_this_country2 / $connected >= 1.95)
        { $requests_per_connected_person = sprintf ("%.0f", $requests_this_country2 / $connected) ; }
        else
        { $requests_per_connected_person = sprintf ("%.1f", $requests_this_country2 / $connected) ; }
      }
    }

    $perc_share_total = '..' ;
    if ($requests_recently_all > 0)
    { $perc_share_total = &Percentage ($requests_this_country / $requests_recently_all) ; }
    $perc_share_total2 = $perc_share_total ;    
    #if ($perc_share_total2 =~ /0\.0/)
    #{ $perc_share_total2 = '<font color=#CCC><small><&nbsp;0.1%</small></font>' ; }

    &Percentage ($requests_this_country / $requests_recently_all) ; 
    
    $perc_tot += $perc_share_total ;

    # $bar  = "&nbsp;" ;
    # $bar2 = "&nbsp;" ;
    # if (int ($perc_share_total * 10) > 0)
    # {
    #   $bar = "<img src='redbar_hor.gif' width=" . (int ($perc_share_total * 10)) . " height=15>" ; 
    #   $bar2 = "<img src='redbar_hor.gif' width=" . (int ($perc_share_total * 10)) . " height=12>" ;
    # } 

    $perc_connected = ".." ;
    if ($population > 0)
    { $perc_connected = sprintf ("%.0f", 100 * $connected / $population) .'%' ; }

    $country2 = &ShortenForHoverbox ($country) ;

    push @csv_countries, "$country2,$code,$requests_this_country2,$population,$connected,$perc_connected,$requests_per_connected_person,$perc\n" ;

  # $population2 = &i2KM2 ($population) ;
    $population2 = $population ; # see csv_shorten_demographics above

  # $connected2  = &i2KM2 ($connected) ;
    $connected2  = $connected ;  # see csv_shorten_demographics above

    $requests_this_country2 = &i2KM2 ($requests_this_country2) ;

    if ($population_tot > 0)
    { $perc_population = &Percentage ($population / $population_tot) ; }

  #  if (($region_code eq 'AF') || ($region_code eq 'AS') || ($region_code eq 'EU'))
  #  { $icon = "<sub><sub>$icon</sub></sub>" ; }
    
    $link_country =~ s/<\/?a[^>]*>//g ;
    $link_country =~ s/alt=['"]+ // ;
    $link_country =~ s/Democratic Republic of the Congo/Congo Dem. Rep./ ;

#    $bar = &Perc2Bar ($perc_share_total,'red',10) ;

    $d3_csv_entries {$region_code} ++ ;
    $index =  $d3_csv_entries {$region_code} ;
    
    $d3_csv_regions2 {$region_code} .= 
      "$index:$iso3:$country2:$north_south_name:$population2:$perc_population:$perc_connected:$requests_this_country2:$perc_share_total2|" ;
   
    $d3_csv_entries {'W'} ++ ;
    if ($d3_csv_entries {'W'} <= $d3_csv_rows_max)
    {
      $index =  $d3_csv_entries {'W'} ;

      $d3_csv_regions2 {'W'} .= 
      "$index:$iso3:$country2:$north_south_name:$population2:$perc_population:$perc_connected:$requests_this_country2:$perc_share_total2|" ;
    }

    $d3_csv_entries {$north_south_code} ++ ;
    if ($d3_csv_entries {$north_south_code} <= $d3_csv_rows_max)
    {
      $index =  $d3_csv_entries {$north_south_code} ;

      $d3_csv_regions2 {$north_south_code} .= 
        "$index:$iso3:$country2:$north_south_name:$population2:$perc_population:$perc_connected:$requests_this_country2:$perc_share_total2|" ;
    }
    
    if ($verbose)
    { push @index_countries, "<a href=#$country>$country ($perc)</a>\n " ; }
    else
    { push @index_countries, "<a href=#$country>$country</a>\n " ; }
  }

  $requests_per_person_tot =  '..' ;

  if ($population_tot > 0)
  { $requests_per_person_tot = sprintf ("%.0f", $requests_tot / $population_tot) ; }

  if ($connected_tot > 0)
  {
    $precision = $views_edits =~ /edit/i ? "%.4f" : "%.1f" ; 
    $requests_per_connected_person_tot = sprintf ($precision, $requests_tot / $connected_tot) ; 
  }

  $perc_connected_tot = ".." ;
  if ($population_tot > 0)
  { $perc_connected_tot = sprintf ("%.0f", 100 * $connected_tot / $population_tot) .'%' ; }

  push @csv_countries, "world,*,$requests_tot,$population_tot,$connected_tot,$perc_connected_tot,$requests_per_connected_person_tot,100%\n" ;

  $requests_tot2   = &i2KM2 ($requests_tot) ;

# $population_tot2 = &i2KM2 ($population_tot) ;
  $population_tot2 = $population_tot ; # see csv_shorten_demographics above
# $connected_tot2  = &i2KM2 ($connected_tot) ;
  $connected_tot2  = $connected_tot ;  # see csv_shorten_demographics above

  $d3_csv_regions2 {'W'} =~ s/"/'/g ; 
  $d3_csv_regions  {'W'} = "$population_tot2,100%,$connected_tot2,$perc_connected_tot,$requests_tot2,$requests_per_connected_person_tot,100%," .
                                $d3_csv_regions2 {'W'} . "\n" ; 
  foreach my $region (qw (N S AF AS EU CA NA SA OC XX))
  {
    $d3_csv_regions2 {$region} =~ s/\|$// ; 

    $population_region = $population_per_region {$region} ;
    $connected_region  = $connected_per_region  {$region} ;
    $requests_region   = $requests_per_region   {$region} ;
    $requests_region2  = $requests_per_region2  {$region} ; 

    $perc_connected_region = ".." ;
    if ($population_region > 0)
    { $perc_connected_region = sprintf ("%.0f", 100 * $connected_region / $population_region) .'%' ; }

    $perc_share_total = '..' ;
    if ($requests_recently_all > 0)
    { $perc_share_total = &Percentage ($requests_region / $requests_recently_all) ; }

    $perc_population_region = ".." ;
    if ($population_region > 0)
    { $perc_population_region = &Percentage ($population_region / $population_tot) ; }

 #  $requests_region2 = int ($requests_region * 1000 / $months_recently) ;

    $requests_per_connected_person = '..' ;
    if ($connected_region > 0)
    {
      if ($views_edits =~ /edit/i)
      { $requests_per_connected_person = sprintf ("%.4f", $requests_region2 / $connected_region) ; }
      else
      { $requests_per_connected_person = sprintf ("%.0f", $requests_region2 / $connected_region) ; }
    }

  # $population_region = &i2KM2 ($population_region) ; # see csv_shorten_demographics above
  # $connected_region  = &i2KM2 ($connected_region) ;  # see csv_shorten_demographics above
    $requests_region   = &i2KM2 ($requests_region) ;
    $requests_region2  = &i2KM2 ($requests_region2) ;

    if ($region ne 'XX')
    { $d3_csv_regions {$region} = "$population_region,$perc_population_region,$connected_region,$perc_connected_region,$requests_region2,$requests_per_connected_person,$perc_share_total," . $d3_csv_regions2 {$region} . "\n" ; }
  }

  # for best contrast some colors differ per bubble (we know their position and hence the color of their background, e.g. ocean, dark country) 
  $d3_csv_regions  = "name,label,latitude,longitude,borderColor,highlightBorderColor,population,perc_population,connected,perc_connected,requests,requests_per_connected_person,perc_share_total,breakdown_by_country,viewfreq_per_country,month=$reportmonth\n" ; 

  $d3_csv_regions .= "World,W,44,-175,black,black,"              . $d3_csv_regions {'W'}  . "\n" ;
  $d3_csv_regions .= "Global North,GN,34,-175,black,black,"      . $d3_csv_regions {'N'}  . "\n" ;
  $d3_csv_regions .= "Global South,GS,34,-157,black,black,"      . $d3_csv_regions {'S'}  . "\n" ;
  $d3_csv_regions .= "North America,NA,49,-104,black,blue,"      . $d3_csv_regions {'NA'} . "\n" ;
  $d3_csv_regions .= "Central America,CA,12.6,-88,black,black,"  . $d3_csv_regions {'CA'} . "\n" ;
  $d3_csv_regions .= "South America,SA,-13.5,-62,black,black,"   . $d3_csv_regions {'SA'} . "\n" ;
  $d3_csv_regions .= "Europe,EU,52.4,13.4,black,black,"          . $d3_csv_regions {'EU'} . "\n" ;
  $d3_csv_regions .= "Asia,AS,42.3,102.7,white,white,"           . $d3_csv_regions {'AS'} . "\n" ;
  $d3_csv_regions .= "Africa,AF,15.3,22.8,white,white,"          . $d3_csv_regions {'AF'} . "\n" ;
  $d3_csv_regions .= "Oceania,OC,-25,130,white,black,"           . $d3_csv_regions {'OC'} . "\n" ;
  $d3_csv_regions =~ s/\n$// ; # avoid empty line at end

  $d3_csv_regions =~ s/\&nbsp;/^/g ; # compact further
  &PrintCsv ($d3_csv_regions, "$path_reports/datamaps-views-per-region.csv") ;
}

sub WriteCsvDataMapInfoPerLanguage
{
  &LogSub ("WriteCsvDataMapInfoPerLanguage\n") ;

  my ($sample_rate) = @_ ;

  my ($link_country,$population,$icon,$bar,$bars,$bar_width,$perc,$perc_tot,$perc_global,$requests_tot, $iso2, $iso3) ;

  foreach $iso2 (keys %country_names)
  { 
    $country_name = $country_names {$iso2} ;
    $country_codes_iso2 {$country_name}  = $iso2 ; 
  # print "1 code $iso2 name $country_name\n" ;
  }

  # for best contrast some colors differ per bubble (we know their position and hence the color of their background, e.g. ocean, dark country) 
# $d3_csv_languages  = "name,label,population,perc_population,connected,perc_connected,requests,requests_per_connected_person,perc_share_total,breakdown_by_language,viewfreq_per_country\n" ; 
  $d3_csv_languages  = "name,label,population,perc_population,requests,breakdown_by_language,viewfreq_per_country,month=$reportmonth\n" ; 

  print "\n" ;
  for $lang (sort {$requests_recently_per_language {$b} <=> $requests_recently_per_language {$a}} keys %requests_recently_per_language)
  {
    $count_languages++ ;
    last if $count_languages > 200 ; # approximate number of active wikipedias, adjust when needed

    ($table_rows_per_country, $viewfreq_per_country) = &PrepLanguageBubbleDetailsPerCountry ($lang, $sample_rate) ;
    $lang_uc = uc ($lang) ;
 #   $out_urls      {$code} = $url ;
    $language_name = $out_languages {$lang} ;
 #   $out_article   {$code} = "://en.wikipedia.org/wiki/" . $out_languages {$key} . "_language" ;
 #   $out_article   {$code} =~ s/ /_/g ;
 #   $out_speakers  {$code} = $speakers ;
 #   $out_regions   {$code} = $regions ;
    
  # $speakers = &i2KM1 (1000000 * $out_speakers {$lang}) ;
    $speakers = 1000000 * $out_speakers {$lang} ; # see csv_shorten_demographics above

    $perc_speakers = &Percentage (1000000 * $out_speakers {$lang} / $population_tot) . ' of ' . &i2KM1 ($population_tot) ;
    $requests = &i2KM1 ($sample_rate * $requests_recently_per_language {$lang}) ;
   
    # print "$count_languages $lang:" . $requests_recently_per_language {$lang} . "\n" ; 

    $perc_per_country = $requests_perc {$lang} ;

    next if $perc_per_country eq '' ; # no country where this language scores >= 0.1% of page views? skip! 
    # print "lang $lang perc_per_country $perc_per_country\n" ;

    $d3_csv_languages .= "\#$count_languages: $language_name Wikipedia,$lang_uc," . 
                       "$speakers,$perc_speakers,$requests,$table_rows_per_country,$perc_per_country\n" ;
  }

  $d3_csv_languages =~ s/\&nbsp;/^/g ; # compact further
  &PrintCsv ($d3_csv_languages, "$path_reports/datamaps-views-per-language.csv") ;
}

1 ;
